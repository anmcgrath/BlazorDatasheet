@using BlazorDatasheet.Core.Commands
@using BlazorDatasheet.Core.Commands.Data
@using BlazorDatasheet.Core.Commands.RowCols
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Menu

@if (HasAnyUserContextMenuActions)
{
    <SheetMenu MenuId="@ContextMenus.Selection">

        @{
            var sheet = context as Sheet;
        }

        @if (sheet is not null && sheet.Selection.ActiveRegion != null)
        {
            <MenuSection SectionId="0">
                @if (CanUserClearCells)
                {
                    <SheetMenuItem OnClick="() => sheet.Cells.ClearCells(sheet.Selection.Regions)">Clear</SheetMenuItem>
                }
                @if (CanUserMergeRange)
                {
                    <SheetMenuItem OnClick="() => sheet.Cells.Merge(sheet.Selection.Regions)">Merge</SheetMenuItem>
                }
            </MenuSection>

            <SheetMenuDivider/>

            @if (sheet.Selection.Regions.Count == 1 && sheet.Selection.ActiveRegion is ColumnRegion c)
            {
                @if (CanUserInsertCols)
                {
                    <SheetMenuItem OnClick="() => sheet.Columns.InsertAt(c.Left, c.Width)">Insert column(s) left</SheetMenuItem>
                }

                @if (CanUserRemoveCols)
                {
                    <SheetMenuItem OnClick="() => sheet.Columns.RemoveAt(c.Left, c.Width)">Delete column(s)</SheetMenuItem>
                }

                @if (CanUserHideCols)
                {
                    <SheetMenuItem OnClick="() => sheet.Columns.Hide(c.Left, c.Width)">Hide column(s)</SheetMenuItem>
                    <SheetMenuItem OnClick="() => sheet.Columns.Unhide(c.Left, c.Width)">Un-hide column(s)</SheetMenuItem>
                }

                @if (CanUserInsertCols || CanUserRemoveCols || CanUserHideCols)
                {
                    <SheetMenuDivider/>
                }

            }

            @if (sheet.Selection.Regions.Count == 1 && sheet.Selection.ActiveRegion is RowRegion r)
            {
                @if (CanUserInsertRows)
                {
                    <SheetMenuItem OnClick="() => sheet.Rows.InsertAt(r.Top, r.Height)">Insert row(s) above</SheetMenuItem>
                }

                @if (CanUserRemoveRows)
                {
                    <SheetMenuItem OnClick="() => sheet.Rows.RemoveAt(r.Top, r.Height)">Delete row(s)</SheetMenuItem>
                }

                @if (CanUserHideRows)
                {
                    <SheetMenuItem OnClick="() => sheet.Rows.Hide(r.Top, r.Height)">Hide row(s)</SheetMenuItem>
                    <SheetMenuItem OnClick="() => sheet.Rows.Unhide(r.Top, r.Height)">Un-hide row(s)</SheetMenuItem>
                }

                @if (CanUserInsertRows || CanUserRemoveRows || CanUserHideRows)
                {
                    <SheetMenuDivider/>
                }

            }

            @if (CanUserSort)
            {
                <SheetSubMenu Label="Sort">
                    <SheetMenuItem OnClick="() => sheet.SortRange(sheet.Selection.ActiveRegion)">Sort Ascending</SheetMenuItem>
                    <SheetMenuItem OnClick="() => sheet.SortRange(sheet.Selection.ActiveRegion, new List<ColumnSortOptions>() { new ColumnSortOptions(0, false) })">Sort Descending</SheetMenuItem>
                </SheetSubMenu>
            }

        }

    </SheetMenu>
}

@code {

    [Parameter] public bool CanUserRemoveRows { get; set; } = true;
    [Parameter] public bool CanUserRemoveCols { get; set; } = true;
    [Parameter] public bool CanUserInsertRows { get; set; } = true;
    [Parameter] public bool CanUserInsertCols { get; set; } = true;
    [Parameter] public bool CanUserSort { get; set; } = true;
    [Parameter] public bool CanUserClearCells { get; set; } = true;
    [Parameter] public bool CanUserMergeRange { get; set; } = true;
    [Parameter] public bool CanUserHideRows { get; set; } = true;
    [Parameter] public bool CanUserHideCols { get; set; } = true;

    private bool HasAnyUserContextMenuActions => 
        (CanUserRemoveRows || CanUserRemoveCols || CanUserInsertRows ||
        CanUserInsertCols || CanUserSort || CanUserMergeRange ||
        CanUserHideRows || CanUserHideCols || CanUserClearCells);
}