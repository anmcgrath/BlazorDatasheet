@using BlazorDatasheet.Core.Commands.Data
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Data.Filter
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Menu
@using BlazorDatasheet.Services
@using BlazorDatasheet.Menu.Filters
@inject IMenuService MenuService;
@inherits SheetComponentBase

<SheetMenu Disabled="@Disabled" MenuId="@ContextMenus.Selection" OnMenuClose="OnSelectionMenuClose">

    @{
        var sheet = context as Sheet;
    }

    @if (sheet is not null && sheet.Selection.ActiveRegion != null)
    {
        <MenuSection SectionId="0">
            @if (MenuOptions.ClearEnabled)
            {
                <SheetMenuItem OnClick="() => sheet.Cells.ClearCells(sheet.Selection.Regions)">Clear</SheetMenuItem>
            }
            @if (MenuOptions.MergeEnabled && !sheet.Selection.ActiveRegion.IsSingleCell())
            {
                <SheetMenuItem OnClick="() => sheet.Cells.Merge(sheet.Selection.Regions)">Merge</SheetMenuItem>
            }
            @if (MenuOptions.MergeEnabled && sheet.Cells.AnyMerges(sheet.Selection.ActiveRegion))
            {
                <SheetMenuItem OnClick="() => sheet.Cells.UnMerge(sheet.Selection.Regions)">Un-merge</SheetMenuItem>
            }
            @if (MenuOptions.AlignmentEnabled)
            {
                <SheetSubMenu Label="Horiz. Alignment ">
                    <SheetMenuItem
                        OnClick="@(() => sheet.SetFormat(sheet.Selection.Regions, new CellFormat() { HorizontalTextAlign = TextAlign.Start }))">
                        Left
                    </SheetMenuItem>
                    <SheetMenuItem
                        OnClick="@(() => sheet.SetFormat(sheet.Selection.Regions, new CellFormat() { HorizontalTextAlign = TextAlign.Center }))">
                        Centre
                    </SheetMenuItem>
                    <SheetMenuItem
                        OnClick="@(() => sheet.SetFormat(sheet.Selection.Regions, new CellFormat() { HorizontalTextAlign = TextAlign.End }))">
                        Right
                    </SheetMenuItem>
                </SheetSubMenu>
                <SheetSubMenu Label="Vert. Alignment">
                    <SheetMenuItem
                        OnClick="@(() => sheet.SetFormat(sheet.Selection.Regions, new CellFormat() { VerticalTextAlign = TextAlign.Start }))">
                        Top
                    </SheetMenuItem>
                    <SheetMenuItem
                        OnClick="@(() => sheet.SetFormat(sheet.Selection.Regions, new CellFormat() { VerticalTextAlign = TextAlign.Center }))">
                        Centre
                    </SheetMenuItem>
                    <SheetMenuItem
                        OnClick="@(() => sheet.SetFormat(sheet.Selection.Regions, new CellFormat() { VerticalTextAlign = TextAlign.End }))">
                        Bottom
                    </SheetMenuItem>
                </SheetSubMenu>
            }
        </MenuSection>

        @if (sheet.Selection.Regions.Count == 1 && sheet.Selection.ActiveRegion is ColumnRegion c)
        {
            @if (MenuOptions.InsertColsEnabled ||
                 MenuOptions.DeleteColsEnabled ||
                 MenuOptions.HideColsEnabled)
            {
                <SheetMenuDivider/>
            }

            @if (MenuOptions.InsertColsEnabled)
            {
                <SheetMenuItem OnClick="() => sheet.Columns.InsertAt(c.Left, c.Width)">Insert column(s) left
                </SheetMenuItem>
            }

            @if (MenuOptions.DeleteColsEnabled)
            {
                <SheetMenuItem OnClick="() => sheet.Columns.RemoveAt(c.Left, c.Width)">Delete column(s)</SheetMenuItem>
            }

            @if (MenuOptions.HideColsEnabled)
            {
                <SheetMenuDivider/>
                <SheetMenuItem OnClick="() => sheet.Columns.Hide(c.Left, c.Width)">Hide column(s)</SheetMenuItem>
                <SheetMenuItem OnClick="() => sheet.Columns.Unhide(c.Left, c.Width)">Un-hide column(s)</SheetMenuItem>
            }
        }

        @if (sheet.Selection.Regions.Count == 1 && sheet.Selection.ActiveRegion is RowRegion r)
        {
            @if (MenuOptions.InsertRowsEnabled || MenuOptions.DeleteRowsEnabled || MenuOptions.HideRowsEnabled)
            {
                <SheetMenuDivider/>
            }

            @if (MenuOptions.InsertRowsEnabled)
            {
                <SheetMenuItem OnClick="() => sheet.Rows.InsertAt(r.Top, r.Height)">Insert row(s) above</SheetMenuItem>
            }

            @if (MenuOptions.DeleteRowsEnabled)
            {
                <SheetMenuItem OnClick="() => sheet.Rows.RemoveAt(r.Top, r.Height)">Delete row(s)</SheetMenuItem>
            }

            @if (MenuOptions.HideRowsEnabled)
            {
                <SheetMenuDivider/>
                <SheetMenuItem OnClick="() => sheet.Rows.Hide(r.Top, r.Height)">Hide row(s)</SheetMenuItem>
                <SheetMenuItem OnClick="() => sheet.Rows.Unhide(r.Top, r.Height)">Un-hide row(s)</SheetMenuItem>
            }
        }

        @if (MenuOptions.SortRangeEnabled && sheet.Selection.ActiveRegion!.Height > 1)
        {
            <SheetMenuDivider/>
            <SheetSubMenu Label="Sort">
                <SheetMenuItem OnClick="() => sheet.SortRange(sheet.Selection.ActiveRegion)">Sort Ascending
                </SheetMenuItem>
                <SheetMenuItem
                    OnClick="() => sheet.SortRange(sheet.Selection.ActiveRegion, new List<ColumnSortOptions>() { new ColumnSortOptions(0, false) })">
                    Sort Descending
                </SheetMenuItem>
            </SheetSubMenu>
        }

        @if (MenuOptions.FilterColumnEnabled &&
             sheet.Selection.Regions.Count == 1 &&
             sheet.Selection.ActiveRegion is ColumnRegion colRegion &&
             colRegion.Width == 1)
        {
            <SheetSubMenu Label="Filter" @ref="_filterSubMenu" DisabledOnReadOnly="false">
                <div style="font-weight: bold; text-align: center;">Filters</div>
                @foreach (var filter in ColumnFilters)
                {
                    <SheetMenuDivider/>
                    if (filter is ValueFilter valueFilter)
                    {
                        <ValueFilterEditor
                            Sheet="sheet"
                            ColumnIndex="@colRegion.Left"
                            Filter="@valueFilter"/>
                    }
                    else if (filter is PatternFilter patternFilter)
                    {
                        <PatternFilterEditor
                            Sheet="sheet"
                            ColumnIndex="@colRegion.Left"
                            Filter="@patternFilter"/>
                    }
                }
                <div style="display: flex; flex-direction: row; justify-content: space-between;">
                    <button @onclick="CancelFilterButtonClick" class="sheet-button"
                            style="width: 80px; margin: 4px 8px;">Cancel
                    </button>
                    <button @onclick="() => AcceptFilterButtonClick(sheet, colRegion.Left)" class="sheet-button"
                            style="width: 80px; margin: 4px 8px;">Apply
                    </button>
                </div>
            </SheetSubMenu>
        }

        // Add any user-defined menu items
        @if (MenuOptions.CustomMenuFragment is not null)
        {
            @MenuOptions.CustomMenuFragment(sheet)
        }
    }

</SheetMenu>

@code {

    [Parameter] public SheetMenuOptions MenuOptions { get; set; } = new();
    [Parameter] public Type[] DefaultFilterTypes { get; set; } = default!;
    [Parameter] public bool Disabled { get; set; }

    private SheetSubMenu? _filterSubMenu;
    private bool HasOpenedFilterMenu { get; set; }

    private List<IFilter> ColumnFilters { get; set; } = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            MenuService.MenuShown += OnSubmenuShown;
    }

    private void OnSubmenuShown(object? sender, MenuShownEventArgs args)
    {
        if (args.MenuId == _filterSubMenu?.SubMenuId && !HasOpenedFilterMenu)
        {
            HasOpenedFilterMenu = true;
            if (!MenuOptions.FilterColumnEnabled) return;

            var sheet = args.Context as Sheet;
            if (sheet == null) return;

            if (sheet.Selection.ActiveRegion is ColumnRegion cr && sheet.Selection.Regions.Count == 1 && cr.Width == 1)
            {
                ColumnFilters = sheet
                    .Columns
                    .Filters
                    .Get(cr.Left)
                    .Filters
                    .Select(x => x.Clone())
                    .ToList();

                if (!ColumnFilters.Any())
                {
                    ColumnFilters = DefaultFilterTypes.Select(x => (IFilter)Activator.CreateInstance(x)!)
                        .ToList();
                }
            }
        }
    }

    private void OnSelectionMenuClose()
    {
        // Reset column filters
        ColumnFilters = new();
        HasOpenedFilterMenu = false;
    }

    private void CancelFilterButtonClick()
    {
        MenuService.CloseMenu(ContextMenus.Selection);
    }

    private void AcceptFilterButtonClick(Sheet sheet, int columnIndex)
    {
        sheet.Columns.Filters.Set(columnIndex, ColumnFilters);
        MenuService.CloseMenu(ContextMenus.Selection);
    }

}