@using BlazorDatasheet.Core.Selecting
@using BlazorDatasheet.DataStructures.Geometry
@using Microsoft.JSInterop
@inject IJSRuntime Js
@implements IAsyncDisposable

<div @ref="_contentEl" class="bds-autoscroll"></div>

@code {

    private bool _enabled;

    [Parameter] public bool Enabled { get; set; } = false;

    [Parameter] public required AutoScrollOptions Options { get; set; } = new();

    [Parameter, EditorRequired] public required Selection? Selection { get; set; }

    private ElementReference _contentEl = default!;
    private IJSObjectReference? _autoScroller = null!;
    private DotNetObjectReference<AutoScroller>? _dotnetHelper;
    private PeriodicTimer? _pt;
    private double _velX;
    private double _velY;

    protected override void OnParametersSet()
    {
        if (_enabled != Enabled)
        {
            if (_enabled && _pt != null)
            {
                _pt.Period = TimeSpan.FromMilliseconds(Options.PollIntervalInMs);
            }

            _enabled = Enabled;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotnetHelper = DotNetObjectReference.Create(this);
            var module = await Js.InvokeAsync<IJSObjectReference>("import", "./_content/BlazorDatasheet/Render/AutoScroll/AutoScroller.razor.js");
            _autoScroller = await module.InvokeAsync<IJSObjectReference>("createAutoScroller");
            await _autoScroller.InvokeVoidAsync("subscribe", _contentEl, _dotnetHelper);

            _pt = new PeriodicTimer(TimeSpan.FromMilliseconds(Options.PollIntervalInMs));
            while (await _pt.WaitForNextTickAsync())
            {
                if (_pt.Period.Milliseconds != Options.PollIntervalInMs)
                    _pt.Period = TimeSpan.FromMilliseconds(Options.PollIntervalInMs);

                if (_enabled && Selection?.IsSelecting == true)
                {
                    await _autoScroller.InvokeVoidAsync("scrollBy", _velX, _velY);
                }
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_autoScroller != null)
            {
                await _autoScroller.InvokeVoidAsync("dispose");
                await _autoScroller.DisposeAsync();
            }

            _dotnetHelper?.Dispose();
            _pt?.Dispose();
        }
        catch (Exception)
        {
            // ignored
        }
    }

    [JSInvokable(nameof(HandleMouseOutsideOfScrollableAncestor))]
    public Task HandleMouseOutsideOfScrollableAncestor(Point2d point)
    {
        var p = 1.2;
        _velX = Math.Max(Math.Pow(Math.Abs(point.X), p), Options.MaxVelocity) * Math.Sign(point.X);
        _velY = Math.Max(Math.Pow(Math.Abs(point.Y), p), Options.MaxVelocity) * Math.Sign(point.Y);
        return Task.CompletedTask;
    }

}