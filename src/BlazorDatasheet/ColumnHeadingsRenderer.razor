@using BlazorDatasheet.Data
@using BlazorDatasheet.Data.Events
@using BlazorDatasheet.DataStructures.Intervals
@using BlazorDatasheet.Interfaces
@using BlazorDatasheet.Render
@using BlazorDatasheet.Selecting
@using BlazorDatasheet.Services
@using BlazorDatasheet.Util
@using Microsoft.JSInterop
@inject IJSRuntime JS;
@implements IDisposable


<div style="position: absolute; top: 0; left: 0;">

    @foreach (var interval in _selectionIntervals)
    {
        <BoxOverlayRenderer
            BackgroundVisible="@true"
            BorderThickness="0"
            BackgroundStyle="background:var(--selection-bg-color);"
            Width="CellLayoutProvider.ComputeWidth(interval.Start, interval.Length) + 2"
            Height="CellLayoutProvider.ComputeHeight(1) + 1"
            X="CellLayoutProvider.ComputeLeftPosition(interval.Start) - 1"
            Y="CellLayoutProvider.ComputeTopPosition(-1)"/>
    }

    @for (int i = 0; i < Sheet.NumCols; i++)
    {
        var col = i;
        <div
            @onmousedown="e => HandleMouseDownOnAdorner(col)"
            style="position:absolute; top: 0; left: @(CellLayoutProvider.ComputeLeftPosition(col + 1) - 5)px; width: 10px; background: none; height: 25px; cursor: col-resize; display: block">
        </div>
    }

    @if (IsDragging)
    {
        var resizeWidth = Math.Max(MinResizeWidth, Sheet.LayoutProvider.ComputeWidth(ActiveAdorner, 1) + CurrentColResizeAmount);
        <BoxOverlayRenderer
            Y="0"
            Width="3"
            BorderThickness="1"
            X="@(CellLayoutProvider.ComputeLeftPosition(ActiveAdorner) + resizeWidth)"
            Height="CellLayoutProvider.ComputeHeight(Sheet.NumRows)"/>
    }

</div>

@for (var i = 0; i < Sheet?.NumCols; i++)
{
    var col = i;
    var colDefn = Sheet?.ColumnHeadings.Count > i ? Sheet?.ColumnHeadings[i] : null;

    <div
        class="sheet-cell @(IsActive(col) ? "column-active" : "")"
        style="z-index: 1;"
        @onmouseup="e => HandleMouseUp(col, e)"
        @onmouseover="e => HandleMouseOver(col, e)"
        @onmousedown="e => HandleMouseDown(col, e)">
        <div class="cell" style="@CssUtil.GetCellWidthStyles(i, 1, CellLayoutProvider)">
            @colDefn?.Header
        </div>
    </div>
}

@code {

    private Sheet? _sheet;

    [Parameter, EditorRequired]
    public Sheet? Sheet { get; set; }

    [Parameter]
    public CellLayoutProvider CellLayoutProvider { get; set; }

    [Parameter]
    public EventCallback<ColumnMouseEvent> OnMouseUp { get; set; }

    [Parameter]
    public EventCallback<ColumnMouseEvent> OnMouseOver { get; set; }

    [Parameter]
    public EventCallback<ColumnMouseEvent> OnMouseDown { get; set; }

    private IWindowEventService _windowEventService;

    private double MouseX { get; set; }
    private double MouseXStart { get; set; }
    public int ActiveAdorner { get; set; }
    public bool IsDragging { get; set; }
    public double CurrentColResizeAmount { get; set; }
    private int MinResizeWidth = 15;

    public List<OrderedInterval> _selectionIntervals { get; set; } = new();

    private DotNetObjectReference<ColumnHeadingsRenderer>? selfReference;

    protected override void OnParametersSet()
    {
        if (_sheet != Sheet)
        {
            if (_sheet != null)
            {
                _sheet.Selection.SelectionChanged -= OnSelectionChanged;
                _sheet.Selection.SelectingChanged -= OnSelectingChanged;
            }
            _sheet = Sheet;
            _sheet.Selection.SelectionChanged += OnSelectionChanged;
            _sheet.Selection.SelectingChanged += OnSelectingChanged;
        }
        base.OnParametersSet();
    }

    [JSInvokable]
    public void HandleMouseMove(int x, int y)
    {
        MouseX = x;
        if (IsDragging)
        {
            CurrentColResizeAmount = MouseX - MouseXStart; // 10 being the minimum width we can resize to
            StateHasChanged();
        }
    }

    private void HandleMouseDownOnAdorner(int col)
    {
        MouseXStart = MouseX;
        ActiveAdorner = col;
        CurrentColResizeAmount = 0;
        IsDragging = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selfReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("onThrottledMouseMove", selfReference, 200);
            _windowEventService = new WindowEventService(JS);
            await _windowEventService.Init();
            _windowEventService.OnMouseUp += WindowEventServiceOnOnMouseUp;
        }
    }

    private bool WindowEventServiceOnOnMouseUp(MouseEventArgs arg)
    {
        if (IsDragging)
        {
            IsDragging = false;
            var resizeWidth = Math.Max(MinResizeWidth, Sheet.LayoutProvider.ComputeWidth(ActiveAdorner, 1) + CurrentColResizeAmount);
            Sheet.SetColumnWidth(ActiveAdorner, resizeWidth);
            return true;
        }

        return false;
    }

    public void Dispose()
    {
        selfReference?.Dispose();
    }

    private bool IsActive(int col)
    {
        return (Sheet!.Selection!.SelectingRegion?.SpansCol(col) == true)
               || Sheet!.Selection!.Regions.Any(x => x.SpansCol(col));
    }

    private void OnSelectionChanged(object? sender, IEnumerable<IRegion> regions) => updateIntervals();
    private void OnSelectingChanged(object? sender, IRegion region) => updateIntervals();

    private void updateIntervals()
    {
        if (Sheet?.Selection == null)
            return;

        var intervals = new List<OrderedInterval>();
        if (Sheet.Selection.SelectingRegion != null && Sheet.Selection.SelectingRegion is ColumnRegion)
        {
            var fixedTempSelection = Sheet.Selection.SelectingRegion.GetIntersection(Sheet.Region);
            intervals.Add(new OrderedInterval(fixedTempSelection.TopLeft.Col, fixedTempSelection.BottomRight.Col));
        }
        foreach (var region in Sheet.Selection.Regions)
        {
            if (region is ColumnRegion)
            {
                var fixedRegion = region.GetIntersection(Sheet.Region);
                intervals.Add(new OrderedInterval(fixedRegion.TopLeft.Col, fixedRegion.BottomRight.Col));
            }
        }
        _selectionIntervals = OrderedInterval.Merge(intervals);
        StateHasChanged();
    }

    public bool IsColumnActive(int col)
    {
        return Sheet.Selection.Regions.Any(x => x.SpansCol(col));
    }

    private void HandleMouseUp(int col, MouseEventArgs args)
    {
        OnMouseUp.InvokeAsync(new ColumnMouseEvent(col, args));
    }

    private void HandleMouseDown(int col, MouseEventArgs args)
    {
        OnMouseDown.InvokeAsync(new ColumnMouseEvent(col, args));
    }

    private void HandleMouseOver(int col, MouseEventArgs args)
    {
        OnMouseOver.InvokeAsync(new ColumnMouseEvent(col, args));
    }

}