@using BlazorDatasheet.Data
@using BlazorDatasheet.Data.Events
@using BlazorDatasheet.DataStructures.Intervals
@using BlazorDatasheet.Render
@using BlazorDatasheet.Selecting
@using BlazorDatasheet.Util
@using Microsoft.AspNetCore.Components.Web.Virtualization;

<div style="position: absolute; top: 0; left: 0;">

    @foreach (var interval in _selectionIntervals)
    {
        <BoxOverlayRenderer
            BackgroundVisible="@true"
            BorderThickness="0"
            BackgroundStyle="background:var(--selection-bg-color);"
            Width="CellLayoutProvider.ComputeWidth(-1, 1) + 2"
            Height="CellLayoutProvider.ComputeHeight(interval.Length) + 1"
            X="CellLayoutProvider.ComputeLeftPosition(-1) - 1"
            Y="CellLayoutProvider.ComputeTopPosition(interval.Start)"/>
    }

</div>

<Virtualize
    @ref="_virtualizer"
    ItemsProvider="LoadRows"
    OverscanCount="8"
    Context="rowNumber">
    <div class="sheet-row">
        <div
            @key="rowNumber"
            class="sheet-cell row-head @(IsActive(rowNumber) ? "row-active" : "")"
            style="display: block !important; @CssUtil.GetCellWidthStyles(-1, 1, CellLayoutProvider)"
            @onmousedown="e => HandleMouseDown(rowNumber, e)"
            @onmouseover="e => HandleMouseOver(rowNumber, e)"
            @onmouseup="e => HandleMouseUp(rowNumber, e)">
            <div class="cell" style="text-align: right">
                @(Sheet.RowHeadings.Count > rowNumber ? Sheet.RowHeadings[rowNumber].Header : rowNumber)
            </div>
        </div>
    </div>
</Virtualize>

@code {

    private Sheet? _sheet;

    [Parameter, EditorRequired]
    public Sheet? Sheet { get; set; }

    [Parameter]
    public CellLayoutProvider CellLayoutProvider { get; set; }

    [Parameter]
    public EventCallback<RowMouseEvent> OnMouseUp { get; set; }

    [Parameter]
    public EventCallback<RowMouseEvent> OnMouseOver { get; set; }

    [Parameter]
    public EventCallback<RowMouseEvent> OnMouseDown { get; set; }

    public List<OrderedInterval> _selectionIntervals { get; set; } = new();

    private Virtualize<int> _virtualizer;

    private bool IsActive(int row)
    {
        return (Sheet!.Selection.SelectingRegion?.SpansRow(row) == true)
               || Sheet!.Selection!.Regions.Any(x => x.SpansRow(row));
    }

    protected override void OnParametersSet()
    {
        if (_sheet != Sheet)
        {
            if (_sheet != null)
            {
                _sheet.Selection.SelectionChanged -= OnSelectionChanged;
                _sheet.Selection.SelectingChanged -= OnSelectingChanged;
                _sheet.RowInserted -= SheetOnRowInserted;
                _sheet.RowRemoved -= SheetOnRowRemoved;
            }
            _sheet = Sheet;
            _sheet.Selection.SelectionChanged += OnSelectionChanged;
            _sheet.Selection.SelectingChanged += OnSelectingChanged;
            _sheet.RowInserted += SheetOnRowInserted;
            _sheet.RowRemoved += SheetOnRowRemoved;
        }
        base.OnParametersSet();
    }

    private async void SheetOnRowRemoved(object? sender, RowRemovedEventArgs e)
    {
        await _virtualizer.RefreshDataAsync();
    }

    private async void SheetOnRowInserted(object? sender, RowInsertedEventArgs e)
    {
        await _virtualizer.RefreshDataAsync();
    }

    private void OnSelectionChanged(object? sender, IEnumerable<IRegion> regions) => updateIntervals();
    private void OnSelectingChanged(object? sender, IRegion region) => updateIntervals();

    private void updateIntervals()
    {
        if (Sheet?.Selection == null)
            return;

        var intervals = new List<OrderedInterval>();
        if (Sheet.Selection.SelectingRegion != null && Sheet.Selection.SelectingRegion is RowRegion)
        {
            var fixedTempSelection = Sheet.Selection.SelectingRegion.GetIntersection(Sheet.Region);
            intervals.Add(new OrderedInterval(fixedTempSelection.TopLeft.Row, fixedTempSelection.BottomRight.Row));
        }
        foreach (var region in Sheet.Selection.Regions)
        {
            if (region is RowRegion)
            {
                var fixedRegion = region.GetIntersection(Sheet.Region);
                intervals.Add(new OrderedInterval(fixedRegion.TopLeft.Row, fixedRegion.BottomRight.Row));
            }
        }
        _selectionIntervals = OrderedInterval.Merge(intervals);
        StateHasChanged();
    }

    private void HandleMouseUp(int row, MouseEventArgs args)
    {
        OnMouseUp.InvokeAsync(new RowMouseEvent(row, args));
    }

    private void HandleMouseDown(int row, MouseEventArgs args)
    {
        OnMouseDown.InvokeAsync(new RowMouseEvent(row, args));
    }

    private void HandleMouseOver(int row, MouseEventArgs args)
    {
        OnMouseOver.InvokeAsync(new RowMouseEvent(row, args));
    }

    /// <summary>
    /// Provides rows to the virtualised renderer
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    public async ValueTask<ItemsProviderResult<int>> LoadRows(
        ItemsProviderRequest request)
    {
        var numRows = request.Count;
        var startIndex = request.StartIndex;
        var rows = Enumerable.Range(startIndex, numRows);
        return new ItemsProviderResult<int>(rows, Sheet.NumRows);
    }

}